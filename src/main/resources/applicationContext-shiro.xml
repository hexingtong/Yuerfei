
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<context:component-scan base-package="com.springmvc" />
	<!-- 使用shiro安全检查注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- id属性值要对应 web.xml中shiro的filter对应的bean -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求地址ormAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/admin2/toLogin"></property>
		<!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功会默认跳转到上一个请求路径 -->
	<!--<property name="successUrl" value="/admin2/index"></property>-->
		<!--&lt;!&ndash; 通过unauthorizedUrl指定没有权限操作时跳转页面，这个位置会拦截不到，下面有给出解决方法 权限认证失败，则跳转到指定页面 &ndash;&gt;-->
		<!-- <property name="unauthorizedUrl" value="/refuse.jsp"></property> -->
		<!-- 过滤器定义，从上到下执行，一般将/**放在最下面 -->
		<property name="filters">
			<map>
				<!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中-->
				<entry key="authc" value-ref="filterPages" />
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				<!-- 对静态资源设置匿名访问 -->
				/images/** = anon
				/view/**= anon
                /css/**=anon
				/js/** = anon
				/admin/smsPhone=anon
				/Goods/getGoodsList=anon
				/admin2/toLogin=authc
				/APP/**=anon
				/admin2/**=anon
				/merchant/addUserInfo=anon
				/** = authc
				<!-- /**=anon 所有的url都可以匿名访问,不能配置在最后一排，不然所有的请求都不会拦截 -->
			</value>
		</property>
	</bean>

	<!-- session失效配置自定义路径 -->
	<bean id="filterPages" class="com.util.shrio.MyFormAuthenticationFilter">
		<property name="usernameParam" value="userName"/>
		<property name="passwordParam" value="pwd"/>
		<property name="loginUrl" value="/admin2/toLogin"/>
	</bean>
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean
			class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
			depends-on="lifecycleBeanPostProcessor" />

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean
			class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />

	</bean>

	<!-- 解决shiro配置的没有权限访问时，unauthorizedUrl不跳转到指定路径的问题 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">/refuse</prop>
			</props>
		</property>
	</bean>

	<!-- securityManager安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">

		<!--<property name="realm" ref="customRealm"></property>-->
		<!--多realm的授权策略设置，配置为必须满足全部realm才算成功，不在realms前配置的话authenticator中的realms集合为空-->
		<!--securityManager注入realms的时候，会把realm也放一份到authenticator中，所以必须写在realms上面!!!-->
		<property name="authenticator">
			<bean class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
				<property name="authenticationStrategy">
					<bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>
				</property>
			</bean>
		</property>
		<!--如果只有一个realm的话，可以直接注入realm属性，不需要注入realms属性-->
		<!--为了以后的扩展，即使只有一个realm还是注入了realms属性(虽然以后估计也都是单realm)-->
		<property name="realms">
			<list>
				<bean class="com.util.shrio.CustomRealm">
					<property name="credentialsMatcher">
						<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
							<!--指定加密算法-->
							<property name="hashAlgorithmName" value="MD5"/>
							<!--指定对密码连续进行5轮md5加密-->
							<property name="hashIterations" value="5"/>
						</bean>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的UserRealm.java -->
	<!--<bean id="userRealm" class="com.util.shrio.UserRealm"/>-->

	<!--&lt;!&ndash;<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">&ndash;&gt;-->
		<!--&lt;!&ndash;&lt;!&ndash; 设置session过期时间为1小时(单位：毫秒)，默认为30分钟 &ndash;&gt;&ndash;&gt;-->
		<!--&lt;!&ndash;<property name="globalSessionTimeout" value="3600000"></property>&ndash;&gt;-->
		<!--&lt;!&ndash;<property name="sessionValidationSchedulerEnabled" value="true"></property>&ndash;&gt;-->
		<!--&lt;!&ndash;<property name="sessionIdUrlRewritingEnabled" value="false"></property>&ndash;&gt;-->
	<!--&lt;!&ndash;</bean>&ndash;&gt;-->

	<!--&lt;!&ndash; Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session &ndash;&gt;-->
	<!--&lt;!&ndash; 即<property name="sessionMode" value="native"/>,详细说明见官方文档 &ndash;&gt;-->
	<!--&lt;!&ndash; 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 &ndash;&gt;-->
	<!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
		<!--&lt;!&ndash;<property name="sessionManager" ref="sessionManager"></property>&ndash;&gt;-->
		<!--<property name="realm" ref="userRealm"/>-->
	<!--</bean>-->

	<!--&lt;!&ndash; Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 &ndash;&gt;-->
	<!--&lt;!&ndash; Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 &ndash;&gt;-->
	<!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
		<!--&lt;!&ndash; Shiro的核心安全接口,这个属性是必须的 &ndash;&gt;-->
		<!--<property name="securityManager" ref="securityManager"/>-->
		<!--&lt;!&ndash; 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 &ndash;&gt;-->
		<!--<property name="loginUrl" value="/admin2/toLogin"/>-->
		<!--&lt;!&ndash; 登录成功后要跳转的连接 &ndash;&gt;-->
		<!--<property name="successUrl" value="/admin2/index"/>-->
		<!--&lt;!&ndash; 用户访问未对其授权的资源时,所显示的连接 &ndash;&gt;-->
		<!--&lt;!&ndash; 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp &ndash;&gt;-->
		<!--<property name="unauthorizedUrl" value="/"/>-->
		<!--&lt;!&ndash; Shiro连接约束配置,即过滤链的定义 &ndash;&gt;-->
		<!--&lt;!&ndash; 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 &ndash;&gt;-->
		<!--&lt;!&ndash; 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 &ndash;&gt;-->
		<!--&lt;!&ndash; anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 &ndash;&gt;-->
		<!--&lt;!&ndash; authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter &ndash;&gt;-->
		<!--<property name="filterChainDefinitions">-->
			<!--<value>-->
				<!--/images/** = anon-->
				<!--/css/**=anon-->
				<!--/js/** = anon-->
				<!--/admin/smsPhone=anon-->
				<!--/Goods/getGoodsList=anon-->
				<!--/APP/**=anon-->
				<!--/admin2/**=anon-->
				<!--/merchant/addUserInfo=anon-->
				<!--/** = authc-->
			<!--</value>-->
		<!--</property>-->
	<!--</bean>-->

	<!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->

	<!--&lt;!&ndash; AOP式方法级权限检查  &ndash;&gt;-->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">-->
		<!--<property name="proxyTargetClass" value="true" />-->
	<!--</bean>-->
	<!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
		<!--<property name="securityManager" ref="securityManager"/>-->
	<!--</bean>-->
</beans>