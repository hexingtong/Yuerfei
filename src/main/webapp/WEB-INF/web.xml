
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
  <display-name>Archetype Created Web Application</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  <!-- Spring和mybatis的配置文件 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
        classpath:spring-mybatis.xml
        <!--classpath:applicationContext-shiro.xml-->
      <!--classpath:quartz.xml-->
    </param-value>

  </context-param>

  <!--Log4j配置-->
  <context-param>
    <param-name>log4jRefreshInterval</param-name>
    <param-value>60000</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!--静态资源图片配置-->
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.jpg</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.gif</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.css</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
  <servlet-name>default</servlet-name>
  <url-pattern>*.js</url-pattern>
</servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.png</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.svg</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.ico</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
  <!-- 编码过滤器 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>

  </filter>
  <filter>
    <filter-name>HeaderFilter</filter-name>
    <filter-class>com.util.Filter.filter</filter-class><!--你过滤器的包 -->
  </filter>
  <filter-mapping>
    <filter-name>HeaderFilter</filter-name>
    <url-pattern>/admin/*</url-pattern><!-- 你开放的接口前缀  -->
  </filter-mapping>
  <filter-mapping>
    <filter-name>HeaderFilter</filter-name>
    <url-pattern>/*</url-pattern><!-- 你开放的接口前缀  -->
  </filter-mapping>

  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--Spring监听器 ApplicationContext 载入 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 防止Spring内存溢出监听器 -->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>



  <!-- Spring MVC 核心配置开始 -->
  <servlet>
    <servlet-name>mvc-dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 可以通过contextConfigLocation来自定义SpringMVC配置文件的位置，如不指定，则默认在WEB-INF目录下，名称为[<servlet-name>]-servlet.xml，
         此时文件名必须为[<servlet-name>]-servlet.xml，否则会出错-->
    <!--以下init-param是自定义SpringMVC的配置文件的位置 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>
  </servlet>

  <!-- 拦截设置 -->
  <servlet-mapping>
    <servlet-name>mvc-dispatcher</servlet-name>
    <!-- 此处可以可以配置成*.do，对应struts的后缀习惯 -->

    <url-pattern>/</url-pattern>
  </servlet-mapping>
  <!-- Spring MVC 核心配置结束 -->

  <!-- 配置SESSION超时，单位是分钟 -->
  <session-config>
    <session-timeout>15</session-timeout>
  </session-config>


<!--shrio配置文件-->
  <!-- shiro过虑器，DelegatingFilterProxy通过代理模式将spring容器中的bean和filter关联起来 -->
    <!--<filter>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
        <!--<init-param>-->
          <!--&lt;!&ndash; 设置true由servlet容器控制filter的生命周期 &ndash;&gt;-->
            <!--<param-name>targetFilterLifecycle</param-name>-->
            <!--<param-value>true</param-value>-->
        <!--</init-param>-->
      <!--&lt;!&ndash; 设置spring容器filter的bean id，如果不设置则找与filter-name一致的bean&ndash;&gt;-->
      <!--<init-param>-->
        <!--<param-name>targetBeanName</param-name>-->
        <!--<param-value>shiroFilter</param-value>-->
      <!--</init-param>-->
    <!--</filter>-->
    <!--&lt;!&ndash; 拦截所有的请求路径 &ndash;&gt;-->
    <!--<filter-mapping>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->

    <!--</filter-mapping>-->
    <!-- 还有一个地方要注意，因为我是单独把shiro写在一个xml文件中，新加了一个文件，所以要添加路径 -->

  <jsp-config>
    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>
      <page-encoding>UTF-8</page-encoding>
    </jsp-property-group>
  </jsp-config>

  <!--配置定时器监听器-->
  <!-- TimerDataTaskListener 监听器 -->

  <!--<listener>-->
    <!--<listener-class>com.util.timeUtil.TimerDataTaskListener</listener-class>-->
  <!--</listener>-->



</web-app>
